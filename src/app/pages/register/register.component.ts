import { Component, OnInit } from '@angular/core';
import { CommonModule } from '@angular/common';
import { FormsModule } from '@angular/forms';
import { Router, RouterModule } from '@angular/router';
import { firstValueFrom } from 'rxjs';
import { AuthService } from '../../shared/services/Auth/auth.service';
import { UserService } from '../../shared/services/User/user-service';
import { User } from '../../shared/models/user';
import { TextComponent } from '../../shared/components/text/text.component';
import { ButtonComponent } from '../../shared/components/button/button.component';
import { IconEyeComponent } from '../../shared/assets/icons/icon-eye.component';
import { IconLogoComponent } from '../../shared/assets/icons/icon-logo.component';
import { IconErrorComponent } from '../../shared/assets/icons/icon-error.component';
import { IconSuccessComponent } from '../../shared/assets/icons/icon-success.component';
import { IconLoadingComponent } from '../../shared/assets/icons/icon-loading.component';

@Component({
  selector: 'app-register',
  standalone: true,
  imports: [
    CommonModule,
    FormsModule,
    RouterModule,
    TextComponent,
    ButtonComponent,
    IconLogoComponent,
    IconEyeComponent,
    IconErrorComponent,
    IconSuccessComponent,
    IconLoadingComponent,
  ],
  templateUrl: './register.component.html',
  styleUrls: ['./register.component.scss'],
})
export class RegisterComponent implements OnInit {
  credentials = {
    name: '',
    username: '',
    email: '',
    password: '',
  };

  confirmPassword = '';
  isLoading = false;
  errorMessage = '';
  successMessage = '';
  showPassword = false;
  showConfirmPassword = false;

  constructor(
    private authService: AuthService,
    private userService: UserService,
    private router: Router
  ) {}

  ngOnInit(): void {
    // If already authenticated, redirect to panel
    if (this.authService.isAuthenticated()) {
      this.router.navigate(['/panel']);
    }
  }

  /**
   * Handle form submission
   */
  async onSubmit(): Promise<void> {
    if (this.isFormValid()) {
      await this.register();
    }
  }

  /**
   * Perform registration
   */
  private async register(): Promise<void> {
    this.isLoading = true;
    this.errorMessage = '';
    this.successMessage = '';

    try {
      // Check if email already exists
      const emailExists = await this.checkEmailExists(this.credentials.email);
      if (emailExists) {
        this.errorMessage = 'Este email já está sendo usado por outro usuário';
        this.isLoading = false;
        return;
      }

      // Create user object for API call
      const newUser: User = {
        id: '', // Will be generated by the server
        name: this.credentials.name,
        username: this.credentials.username,
        email: this.credentials.email,
        password: this.credentials.password,
      };

      this.userService.create(newUser).subscribe({
        next: (response: User) => {
          this.isLoading = false;
          this.successMessage =
            'Conta criada com sucesso! Redirecionando para o login...';

          // Redirect to login after 2 seconds
          setTimeout(() => {
            this.router.navigate(['/login']);
          }, 2000);
        },
        error: (error: any) => {
          this.isLoading = false;
          this.handleRegisterError(error);
        },
      });
    } catch (error) {
      this.isLoading = false;
      this.errorMessage = 'Erro ao verificar dados. Tente novamente.';
    }
  }

  /**
   * Check if email already exists
   */
  private async checkEmailExists(email: string): Promise<boolean> {
    try {
      const users = await firstValueFrom(this.userService.getAll());
      if (!Array.isArray(users)) return false;
      return users.some((user) => user.email === email);
    } catch (error) {
      console.error('Erro ao verificar email:', error);
      return false;
    }
  }

  /**
   * Handle registration errors
   */
  private handleRegisterError(error: any): void {
    if (error.status === 409) {
      this.errorMessage = 'Este email já está em uso';
    } else if (error.status === 400) {
      this.errorMessage = 'Por favor, verifique os dados informados';
    } else if (error.status === 0) {
      this.errorMessage = 'Erro de conexão. Verifique sua internet';
    } else {
      this.errorMessage = 'Erro interno do servidor. Tente novamente';
    }
  }

  /**
   * Validate form
   */
  private isFormValid(): boolean {
    if (!this.credentials.name.trim()) {
      this.errorMessage = 'Nome completo é obrigatório';
      return false;
    }

    if (this.credentials.name.length < 2) {
      this.errorMessage = 'Nome completo deve ter pelo menos 2 caracteres';
      return false;
    }

    if (!this.credentials.username.trim()) {
      this.errorMessage = 'Nome de usuário é obrigatório';
      return false;
    }

    if (this.credentials.username.length < 3) {
      this.errorMessage = 'Nome de usuário deve ter pelo menos 3 caracteres';
      return false;
    }

    if (!this.credentials.email.trim()) {
      this.errorMessage = 'Email é obrigatório';
      return false;
    }

    if (!this.isValidEmail(this.credentials.email)) {
      this.errorMessage = 'Email inválido';
      return false;
    }

    if (!this.credentials.password.trim()) {
      this.errorMessage = 'Senha é obrigatória';
      return false;
    }

    if (this.credentials.password.length < 6) {
      this.errorMessage = 'Senha deve ter pelo menos 6 caracteres';
      return false;
    }

    if (!this.confirmPassword.trim()) {
      this.errorMessage = 'Confirmação de senha é obrigatória';
      return false;
    }

    if (this.credentials.password !== this.confirmPassword) {
      this.errorMessage = 'As senhas não coincidem';
      return false;
    }

    return true;
  }

  /**
   * Validate email format
   */
  private isValidEmail(email: string): boolean {
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    return emailRegex.test(email);
  }

  /**
   * Toggle password visibility
   */
  togglePasswordVisibility(): void {
    this.showPassword = !this.showPassword;
  }

  /**
   * Toggle confirm password visibility
   */
  toggleConfirmPasswordVisibility(): void {
    this.showConfirmPassword = !this.showConfirmPassword;
  }

  /**
   * Clear error message
   */
  clearError(): void {
    this.errorMessage = '';
  }

  /**
   * Clear success message
   */
  clearSuccess(): void {
    this.successMessage = '';
  }
}
